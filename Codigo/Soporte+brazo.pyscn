    # -*- coding: utf-8 -*-
from stlib.physics.deformable import ElasticMaterialObject
from stlib.physics.constraints import FixedBox
from stlib.physics.collision import CollisionMesh
from stlib.scene import Node
from softrobots.actuators import PullingCable
from splib.loaders import loadPointListFromFile

import Sofa
class ArmController(Sofa.PythonScriptController):
    def __init__(self, node, cable):
        self.cableconstraintvalue = cable.getObject("CableConstraint").findData('value')
        self.name = "ArmController"

    def onKeyPressed(self,c):
        if (c == "+"):
            self.cableconstraintvalue.value =  self.cableconstraintvalue.value[0][0] + 2.
            print ('Shortening')
            print self.cableconstraintvalue.value
        if (c == "-"):
            self.cableconstraintvalue.value =  self.cableconstraintvalue.value[0][0] - 2.
            print 'Lengthening'
            print (self.cableconstraintvalue.value)

def SArm(parentNode=None, name="SArm",
           rotation=[0.0, 0.0, 0.0], translation=[0.0, 0.0, 0.0],
           fixingBox=[0.0,0.0,0.0], pullPointLocation=[0.0,0.0,0.0]):

    sarm = Node(parentNode, "SArm")
    eobject = ElasticMaterialObject(sarm,
                                   volumeMeshFileName="mesh/reduce1.vtk",
                                   name='eobject',
                                   poissonRatio=0.3,
                                   youngModulus=18000,
                                   totalMass=0.5,
                                   surfaceColor=[0.0, 0.3, 0.9],
                                   surfaceMeshFileName="STL/Brazo_20cm.stl",
                                   rotation=rotation,
                                   translation=translation)

    FixedBox(eobject, doVisualization=True, atPositions=[73,10,65,0,0,0])
    cable = PullingCable(eobject,
                         cableGeometry= loadPointListFromFile("cable/cable32.json"),
                         name='tendon',
                         pullPointLocation='35.0 0.0 10.0')

    CollisionMesh(eobject, surfaceMeshFileName="STL/Brazo_20cm.stl", name="part0", collisionGroup=[1, 2], rotation=[90,0,0])


    CollisionMesh(eobject,
                 surfaceMeshFileName="STL/colli/parte1.stl",
                 name="CollisionMeshAuto1", collisionGroup=[1])

    CollisionMesh(eobject,
                 surfaceMeshFileName="STL/colli/parte2.stl",
                 name="CollisionMeshAuto2", collisionGroup=[2])

    CollisionMesh(eobject,
                 surfaceMeshFileName="STL/colli/parte3.stl",
                 name="CollisionMeshAuto3", collisionGroup=[1])

    CollisionMesh(eobject,
                 surfaceMeshFileName="STL/colli/parte4.stl",
                 name="CollisionMeshAuto4", collisionGroup=[2])

    CollisionMesh(eobject,
                 surfaceMeshFileName="STL/colli/parte5.stl",
                 name="CollisionMeshAuto5", collisionGroup=[1])

    CollisionMesh(eobject,
                 surfaceMeshFileName="STL/colli/parte6.stl",
                 name="CollisionMeshAuto6", collisionGroup=[2])

    CollisionMesh(eobject,
                 surfaceMeshFileName="STL/colli/parte7.stl",
                 name="CollisionMeshAuto7", collisionGroup=[1])

    CollisionMesh(eobject,
                 surfaceMeshFileName="STL/colli/parte8.stl",
                 name="CollisionMeshAuto8", collisionGroup=[2])

    CollisionMesh(eobject,
                 surfaceMeshFileName="STL/colli/parte9.stl",
                 name="CollisionMeshAuto9", collisionGroup=[1])

    CollisionMesh(eobject,
                 surfaceMeshFileName="STL/colli/parte10.stl",
                 name="CollisionMeshAuto10", collisionGroup=[2])

    ArmController(sarm, cable)



def Support(parentNode=None, name="Support",
           rotation=[0,60,0], translation=[36,200,40]):

    sup= Node(parentNode, "Support")


    totalMass = 1.0
    volume = 1.0
    inertiaMatrix = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]

    sup.createObject('MechanicalObject', name="DOF", template="Rigid3d", translation=translation, rotation=rotation)
    sup.createObject('UniformMass', totalMass = 0.1)#  name="vertexMass", vertexMass=[totalMass, volume, inertiaMatrix[:]])
    sup.createObject('UncoupledConstraintCorrection')

    #para el Time integration and solver

    sup.createObject('EulerImplicitSolver', name='odesolver')
    sup.createObject('CGLinearSolver', name='Solver')


    #para la visual
    visual= Node(sup, "Visu")
    visual.createObject('MeshObjLoader', name="loader", filename="STL/Soporte_v2.obj")# , triangulate=True)
    visual.createObject('OglModel', name="Visual", src="@loader", color=[0.1,0.0,1.0])
    visual.createObject('RigidMapping')



   
    # #para las colisiones
    collision = sup.createChild("CubeCollisionModel")
    collision.createObject('MeshObjLoader', name="loader", filename="STL/Soporte_v2.obj", triangulate=True, scale=1.10)
    
    collision.createObject('MeshTopology', src="@loader")
    collision.createObject('MechanicalObject')
    
    collision.createObject('Triangle')
    collision.createObject('Line')
    collision.createObject('Point')
    
    collision.createObject('RigidMapping')
  

def createScene(rootNode):
    # -*- coding: utf-8 -*-
    from stlib.scene import MainHeader, ContactHeader
    from stlib.visuals import ShowGrid
    from stlib.physics.rigid import Floor
    from stlib.physics.rigid import Cube

    m=MainHeader(rootNode, plugins=["SoftRobots"],gravity=[0.0,0.0,-981.0])
    m.getObject("VisualStyle").displayFlags='showForceFields showBehaviorModels showInteractionForceFields'
    ContactHeader(rootNode, alarmDistance=4, contactDistance=3, frictionCoef=0.08)
    ShowGrid(rootNode)

    SArm(rootNode)
    
    Support(rootNode)
    
    return rootNode
